name: Direct Deploy to Production

on:
  pull_request:
    types: [ closed ]
    branches:
      - master

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    # Add environment variables for database connection
    env:
      SPRING_DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      SEARCHAPI_TOKEN: ${{ secrets.SEARCHAPI_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven

      # Create application.properties for testing
      - name: Set up application properties
        run: |
          cat > src/main/resources/application.properties << EOF
          spring.application.name=ewf-service
          spring.cache.type=simple
          
          spring.datasource.url=${SPRING_DATASOURCE_URL}
          spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
          spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
          
          jwt.secret=${JWT_SECRET}
          searchapi.token=${SEARCHAPI_TOKEN}
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
          
          # Hibernate Configuration
          spring.jpa.show-sql=false
          spring.jpa.properties.hibernate.format_sql=true
          
          # Server Settings
          server.port=8080
          server.address=127.0.0.1
          EOF

      - name: Run unit tests
        run: mvn test

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven

      - name: Package the application
        run: mvn -B package -DskipTests

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: target/*.jar

  copy_jar:
    name: Copy JAR to Server
    runs-on: ubuntu-latest
    needs: build
    if: github.event.pull_request.merged == true

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: Rename JAR file locally
        run: |
          JAR_FILE=$(find . -name "*.jar" -type f | head -n1)
          if [[ -n "$JAR_FILE" ]]; then
            cp "$JAR_FILE" app.jar
            echo "Created app.jar from $JAR_FILE"
          else
            echo "No JAR file found!"
            exit 1
          fi

      - name: Copy JAR to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: 22
          source: "app.jar"
          target: "${{ secrets.PROD_DEPLOY_PATH }}"
          overwrite: true

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: copy_jar
    if: github.event.pull_request.merged == true

    steps:
    - name: Deploy application
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: 22
        script: |
          set -e
          echo 'Starting deployment on Production VPS...'
          
          # Prepare deployment directory
          mkdir -p ${{ secrets.PROD_DEPLOY_PATH }}
          cd ${{ secrets.PROD_DEPLOY_PATH }}
          
          # Check if JAR file exists
          if [[ ! -f app.jar ]]; then
            echo "ERROR: app.jar not found in $(pwd)"
            ls -la
            exit 1
          fi
          
          echo "JAR file found: $(ls -la app.jar)"
          
          # Create production application.properties
          cat > application.properties << 'EOF'
          spring.application.name=ewf-service
          spring.cache.type=simple
          
          spring.datasource.url=${{ secrets.DATASOURCE_URL }}
          spring.datasource.username=${{ secrets.DATASOURCE_USERNAME }}
          spring.datasource.password=${{ secrets.DATASOURCE_PASSWORD }}
          
          jwt.secret=${{ secrets.JWT_SECRET }}
          searchapi.token=${{ secrets.SEARCHAPI_TOKEN }}
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
          
          # Hibernate Configuration
          spring.jpa.show-sql=false
          spring.jpa.properties.hibernate.format_sql=true
          
          # Server Settings for production
          server.port=8080
          server.address=0.0.0.0
          EOF
          
          echo "Application properties created"
          
          # Stop the running application if it exists
          if [[ -f app.pid ]]; then
            if ps -p $(cat app.pid) > /dev/null; then
              echo 'Stopping the current running application...'
              kill -15 $(cat app.pid)
              sleep 5
              if ps -p $(cat app.pid) > /dev/null; then
                kill -9 $(cat app.pid)
              fi
            fi
            rm -f app.pid
          fi
          
          # Check Java version
          java -version
          
          # Start the new application
          echo 'Starting the new application...'
          nohup java -jar app.jar --spring.config.location=file:./application.properties > app.log 2>&1 &
          APP_PID=$!
          echo $APP_PID > app.pid
          
          echo "Application started with PID: $APP_PID"
          
          # Wait a moment and check if it's still running
          sleep 5
          if ps -p $APP_PID > /dev/null; then
            echo "Application is running successfully!"
          else
            echo "ERROR: Application failed to start"
            echo "Last 20 lines of log:"
            tail -20 app.log
            exit 1
          fi
          
          echo 'Deployment completed successfully!'