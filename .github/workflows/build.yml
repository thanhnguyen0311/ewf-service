name: Direct Deploy to Production

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  test_and_build:
    name: Test and Build
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    # Add environment variables for database connection
    env:
      SPRING_DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      SEARCHAPI_TOKEN: ${{ secrets.SEARCHAPI_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven

      # Create application.properties for testing
      - name: Set up application properties
        run: |
          cat > src/main/resources/application.properties << EOF
          spring.application.name=ewf-service
          spring.cache.type=simple
          
          spring.datasource.url=${SPRING_DATASOURCE_URL}
          spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
          spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
          
          jwt.secret=${JWT_SECRET}
          searchapi.token=${SEARCHAPI_TOKEN}
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
          
          # Hibernate Configuration
          spring.jpa.show-sql=false
          spring.jpa.properties.hibernate.format_sql=true
          
          # Server Settings
          server.port=8080
          server.address=127.0.0.1
          EOF

      - name: Run unit tests
        run: mvn test

      - name: Package the application
        run: mvn -B package -DskipTests

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: target/*.jar

  deploy_to_production:
    name: Deploy to Production VPS
    runs-on: ubuntu-latest
    needs: test_and_build
    if: github.event.pull_request.merged == true

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build

      # Set up SSH key with proper format and permissions
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PROD_SSH_KEY }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PROD_HOST }} >> ~/.ssh/known_hosts
      # Transfer JAR file to server
      - name: Transfer JAR file
        run: scp *.jar ${{ secrets.PROD_USERNAME }}@${{ secrets.PROD_HOST }}:~/app.jar

      # Run deployment commands on server
      - name: Deploy application
        run: |
          ssh ${{ secrets.PROD_USERNAME }}@${{ secrets.PROD_HOST }} "
            set -e
            echo 'Starting deployment on Production VPS...'
          
            # Prepare deployment directory
            mkdir -p ${{ secrets.PROD_DEPLOY_PATH }}
            cd ${{ secrets.PROD_DEPLOY_PATH }}
          
            # Move the JAR file
            rm -f app.jar
            mv ~/app.jar app.jar
          
            # Create production application.properties
            cat > application.properties << EOF
            spring.application.name=ewf-service
            spring.cache.type=simple
          
            spring.datasource.url=${{ secrets.PROD_DATASOURCE_URL }}
            spring.datasource.username=${{ secrets.PROD_DATASOURCE_USERNAME }}
            spring.datasource.password=${{ secrets.PROD_DATASOURCE_PASSWORD }}
          
            jwt.secret=${{ secrets.JWT_SECRET }}
            searchapi.token=${{ secrets.SEARCHAPI_TOKEN }}
            spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
            spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
          
            # Hibernate Configuration
            spring.jpa.show-sql=false
            spring.jpa.properties.hibernate.format_sql=true
          
            # Server Settings for production
            server.port=8080
            server.address=0.0.0.0
            EOF
          
            # Stop the running application if it exists
            if [[ -f app.pid ]]; then
              if ps -p \$(cat app.pid) > /dev/null; then
                echo 'Stopping the current running application...'
                kill -15 \$(cat app.pid)
                sleep 5
                if ps -p \$(cat app.pid) > /dev/null; then
                  kill -9 \$(cat app.pid)
                fi
              fi
              rm -f app.pid
            fi
          
            # Start the new application
            echo 'Starting the new application...'
            nohup java -jar app.jar --spring.config.location=file:./application.properties > app.log 2>&1 &
            echo \$! > app.pid
          
            echo 'Deployment completed successfully!'
          "
